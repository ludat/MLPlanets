-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Initial project template from stack, using test-framework with QuickCheck
--   
--   Please see README.md
@package mercaplanets
@version 0.1.0.0

module Lib

-- | Enum with all the Planet types
data Planet
Ferengi :: Planet
Betasoide :: Planet
Vulcano :: Planet

-- | Representations of a point in space
data Point
Point :: Distance -> Distance -> Point
[x] :: Point -> Distance
[y] :: Point -> Distance

-- | Dummy type for angles
type Angle = Double

-- | Dummy type for days
type Day = Double

-- | Dummy type for speeds
type Speed = Double

-- | Dummy type for distances in space
type Distance = Double

-- | Dummy type for derivated of distance in space
type Distance' = Double

-- | A line is described as two points
data Line
Line :: Point -> Point -> Line
[from] :: Line -> Point
[to] :: Line -> Point

-- | Side is useful to tell to which side of a line is a point
data Side
Above :: Side
Below :: Side

-- | Slope is useful to tell if a distance is growing or shrinking
data Slope
Descending :: Slope
Flat :: Slope
Ascending :: Slope

-- | The weather of the planets which depends on their relative positions
data Weather
Drought :: Weather
HeavyRain :: Weather
Rain :: Weather
Perfect :: Weather
Unknown :: Weather

-- | Entry point for most programs which checks the weather conditions for
--   a given day
weatherAt :: Day -> Weather
sideOfOtherPlanet :: Day -> Maybe Side
pmod' :: (Num a, Ord a) => a -> a -> a
pmod :: Angle -> Angle -> Angle

-- | Using the angles check if the sun is inside the triangle if for each
--   planet the other two planets are on different sides of the sun then
--   the sun must be inside the triangle that all planets form
isSunInsideTriangle :: Angle -> Angle -> Angle -> Bool

-- | Check if the angles of planets are all aligned with the sun If mod 180
--   all angles are the same then all planets are aligned
isSunAlignedWithPlanets :: Angle -> Angle -> Angle -> Bool
isSunInsideTriangleAt :: Day -> Bool
isSunAlignedWithPlanetsAt :: Day -> Bool

-- | Check to which side of a line a point is
--   
--   If the point is on the line then return <a>Nothing</a>
sideOf :: Point -> Line -> Maybe Side
distanceBetween :: Point -> Point -> Distance
allPlanets :: [Planet]
otherPlanets :: Planet -> [Planet]
distanceBetweenPlanets :: Day -> Planet -> Planet -> Distance
distanceBetweenPlanets' :: Day -> Planet -> Planet -> Distance'
distanceBetweenAllPlanets :: Day -> Distance
slopeOfTriangleAt :: Day -> Slope
distanceBetweenAllPlanets' :: Day -> Distance
distanceBetweenPlanets2 :: Day -> Planet -> Planet -> Distance
toRadians :: Angle -> Angle
toDegrees :: Angle -> Angle

-- | Get the angle of a planet at a given day
positionAfterDays :: Day -> Planet -> Point

-- | Get the angle of a planet at a given day
angleAfterDays :: Day -> Planet -> Angle

-- | Get the distance from the Sun of a given planet
distanceFromTheSun :: Planet -> Distance

-- | Get the speed of a given planet
speed :: Planet -> Speed
instance GHC.Classes.Eq Lib.Weather
instance GHC.Classes.Ord Lib.Slope
instance GHC.Classes.Eq Lib.Slope
instance GHC.Show.Show Lib.Slope
instance GHC.Classes.Eq Lib.Side
instance GHC.Show.Show Lib.Side
instance GHC.Show.Show Lib.Point
instance GHC.Classes.Eq Lib.Planet
instance GHC.Show.Show Lib.Planet
instance GHC.Show.Show Lib.Weather
